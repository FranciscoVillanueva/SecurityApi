//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Security
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SecurityApiEntities : DbContext
    {
        public SecurityApiEntities()
            : base("name=SecurityApiEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccessEntity> AccessEntity { get; set; }
        public virtual DbSet<AccessEntityAuthorizations> AccessEntityAuthorizations { get; set; }
        public virtual DbSet<AccessEntityUsersSettings> AccessEntityUsersSettings { get; set; }
        public virtual DbSet<ActiveToken> ActiveToken { get; set; }
        public virtual DbSet<Application> Application { get; set; }
        public virtual DbSet<ApplicationAccess> ApplicationAccess { get; set; }
        public virtual DbSet<ApplicationAccessActions> ApplicationAccessActions { get; set; }
        public virtual DbSet<CatDomainSettings> CatDomainSettings { get; set; }
        public virtual DbSet<CatSettingsDataTypes> CatSettingsDataTypes { get; set; }
        public virtual DbSet<CatSystemCatalog> CatSystemCatalog { get; set; }
        public virtual DbSet<CatSystemCatalogDetail> CatSystemCatalogDetail { get; set; }
        public virtual DbSet<CatUserSettings> CatUserSettings { get; set; }
        public virtual DbSet<Domain> Domain { get; set; }
        public virtual DbSet<DomainSettings> DomainSettings { get; set; }
        public virtual DbSet<EndUser> EndUser { get; set; }
        public virtual DbSet<IPAddress> IPAddress { get; set; }
        public virtual DbSet<Profile> Profile { get; set; }
        public virtual DbSet<UserEntity> UserEntity { get; set; }
        public virtual DbSet<UserEntityPermissionsAccess> UserEntityPermissionsAccess { get; set; }
        public virtual DbSet<UserProfiles> UserProfiles { get; set; }
        public virtual DbSet<UserPwdHistoryLog> UserPwdHistoryLog { get; set; }
        public virtual DbSet<UserSettings> UserSettings { get; set; }
        public virtual DbSet<uvSysUserEntityAuthorizations> uvSysUserEntityAuthorizations { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
    
        public virtual int upSysAddProfile(string psDomainTypeCd, string psEntityTypeCd, string psProfileCd, string psProfileName, string psUserName, ObjectParameter pnProfileId)
        {
            var psDomainTypeCdParameter = psDomainTypeCd != null ?
                new ObjectParameter("psDomainTypeCd", psDomainTypeCd) :
                new ObjectParameter("psDomainTypeCd", typeof(string));
    
            var psEntityTypeCdParameter = psEntityTypeCd != null ?
                new ObjectParameter("psEntityTypeCd", psEntityTypeCd) :
                new ObjectParameter("psEntityTypeCd", typeof(string));
    
            var psProfileCdParameter = psProfileCd != null ?
                new ObjectParameter("psProfileCd", psProfileCd) :
                new ObjectParameter("psProfileCd", typeof(string));
    
            var psProfileNameParameter = psProfileName != null ?
                new ObjectParameter("psProfileName", psProfileName) :
                new ObjectParameter("psProfileName", typeof(string));
    
            var psUserNameParameter = psUserName != null ?
                new ObjectParameter("psUserName", psUserName) :
                new ObjectParameter("psUserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upSysAddProfile", psDomainTypeCdParameter, psEntityTypeCdParameter, psProfileCdParameter, psProfileNameParameter, psUserNameParameter, pnProfileId);
        }
    
        public virtual ObjectResult<byte[]> upSysEncryptStr(string pchrvData)
        {
            var pchrvDataParameter = pchrvData != null ?
                new ObjectParameter("pchrvData", pchrvData) :
                new ObjectParameter("pchrvData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("upSysEncryptStr", pchrvDataParameter);
        }
    
        public virtual int upSysGetDesEncryptData(byte[] binvData, ObjectParameter pchrvData)
        {
            var binvDataParameter = binvData != null ?
                new ObjectParameter("binvData", binvData) :
                new ObjectParameter("binvData", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upSysGetDesEncryptData", binvDataParameter, pchrvData);
        }
    
        public virtual ObjectResult<upSysGetDomainSetting_Result> upSysGetDomainSetting(string domainTypeCd)
        {
            var domainTypeCdParameter = domainTypeCd != null ?
                new ObjectParameter("DomainTypeCd", domainTypeCd) :
                new ObjectParameter("DomainTypeCd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<upSysGetDomainSetting_Result>("upSysGetDomainSetting", domainTypeCdParameter);
        }
    
        public virtual int upSysGetEncryptData(string pchrvData)
        {
            var pchrvDataParameter = pchrvData != null ?
                new ObjectParameter("pchrvData", pchrvData) :
                new ObjectParameter("pchrvData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upSysGetEncryptData", pchrvDataParameter);
        }
    
        public virtual ObjectResult<upSysGetIPAddress_Result> upSysGetIPAddress(Nullable<int> pnUserId, string psFromIPAddress)
        {
            var pnUserIdParameter = pnUserId.HasValue ?
                new ObjectParameter("pnUserId", pnUserId) :
                new ObjectParameter("pnUserId", typeof(int));
    
            var psFromIPAddressParameter = psFromIPAddress != null ?
                new ObjectParameter("psFromIPAddress", psFromIPAddress) :
                new ObjectParameter("psFromIPAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<upSysGetIPAddress_Result>("upSysGetIPAddress", pnUserIdParameter, psFromIPAddressParameter);
        }
    
        public virtual ObjectResult<upSysGetSettingsByUser_Result> upSysGetSettingsByUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<upSysGetSettingsByUser_Result>("upSysGetSettingsByUser", userIdParameter);
        }
    
        public virtual ObjectResult<upSysGetUserSetting_Result> upSysGetUserSetting(string domainCd, string userName)
        {
            var domainCdParameter = domainCd != null ?
                new ObjectParameter("DomainCd", domainCd) :
                new ObjectParameter("DomainCd", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<upSysGetUserSetting_Result>("upSysGetUserSetting", domainCdParameter, userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> upSysGetValidAuthentication(string psUserName, string psPassword, string psCompanyCd)
        {
            var psUserNameParameter = psUserName != null ?
                new ObjectParameter("psUserName", psUserName) :
                new ObjectParameter("psUserName", typeof(string));
    
            var psPasswordParameter = psPassword != null ?
                new ObjectParameter("psPassword", psPassword) :
                new ObjectParameter("psPassword", typeof(string));
    
            var psCompanyCdParameter = psCompanyCd != null ?
                new ObjectParameter("psCompanyCd", psCompanyCd) :
                new ObjectParameter("psCompanyCd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("upSysGetValidAuthentication", psUserNameParameter, psPasswordParameter, psCompanyCdParameter);
        }
    
        public virtual ObjectResult<upSysGetVerifyAccess_Result> upSysGetVerifyAccess(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<upSysGetVerifyAccess_Result>("upSysGetVerifyAccess", userIdParameter);
        }
    
        public virtual ObjectResult<string> Desencriptar(string password_hash, ObjectParameter password_desenc)
        {
            var password_hashParameter = password_hash != null ?
                new ObjectParameter("password_hash", password_hash) :
                new ObjectParameter("password_hash", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Desencriptar", password_hashParameter, password_desenc);
        }
    
        public virtual ObjectResult<string> DesencriptaVer2(string key, byte[] hash)
        {
            var keyParameter = key != null ?
                new ObjectParameter("Key", key) :
                new ObjectParameter("Key", typeof(string));
    
            var hashParameter = hash != null ?
                new ObjectParameter("hash", hash) :
                new ObjectParameter("hash", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DesencriptaVer2", keyParameter, hashParameter);
        }
    
        public virtual ObjectResult<byte[]> Encriptar(string password_hash)
        {
            var password_hashParameter = password_hash != null ?
                new ObjectParameter("password_hash", password_hash) :
                new ObjectParameter("password_hash", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("Encriptar", password_hashParameter);
        }
    
        public virtual ObjectResult<byte[]> EncriptaVer2(string key, string word)
        {
            var keyParameter = key != null ?
                new ObjectParameter("Key", key) :
                new ObjectParameter("Key", typeof(string));
    
            var wordParameter = word != null ?
                new ObjectParameter("word", word) :
                new ObjectParameter("word", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("EncriptaVer2", keyParameter, wordParameter);
        }
    }
}
